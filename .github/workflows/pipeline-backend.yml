name: Pipeline Backend

on:
  push:
    paths:
      - 'deer-vision-backend/**'
    branches:
      - '**'

env:
  AWS_ACCOUNT_ID: '496124100072'
  AWS_REGION: 'eu-central-1'
  APP_NAME: 'deervision'
  APP_JAR_START_NAME: 'deer-vision'
  APP_FOLDER: 'deer-vision-backend'

jobs:
  backend:
    runs-on: ubuntu-latest

    permissions:
      id-token: write # This is required for requesting the JWT on AWS
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
          cache: 'maven'

      - name: Build JAR
        run: |
          cd ./${{ env.APP_FOLDER }}/
          mvn -B clean package

      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.APP_NAME }}GitHubAction
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/master'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to Amazon ECR
        if: github.ref == 'refs/heads/master'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.APP_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd ./${{ env.APP_FOLDER }}/deploy/
          cp ../target/${{ env.APP_JAR_START_NAME }}*.jar ./${{ env.APP_JAR_START_NAME }}.jar
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Set Up SSH key
        if: github.ref == 'refs/heads/master'
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

      - name: Deploy Docker Image On Instance
        if: github.ref == 'refs/heads/master'
        run: |
          cd ./${{ env.APP_FOLDER }}/deploy/
          EC2_PUBLIC_IP=$(aws ec2 describe-instances --filters Name=key-name,Values=${{ env.APP_NAME }} Name=instance-state-name,Values=running --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "Instance IP found: $EC2_PUBLIC_IP"
          ssh -o "StrictHostKeyChecking=no" -i ~/.ssh/id_rsa ubuntu@$EC2_PUBLIC_IP 'bash -s' < deploy-backend.sh > deploy.log 2>&1
          cat deploy.log

      - name: Show Error Deploy Logs
        if: github.ref == 'refs/heads/master' && failure()
        run: |
          cat ./${{ env.APP_FOLDER }}/deploy/deploy.log

      - name: Check Deployment
        if: github.ref == 'refs/heads/master'
        run: |
          max_attempts=35
          success=false
          for ((i=1; i<=max_attempts; i++)); do
            http_status=$(curl -s -o /dev/null -w "%{http_code}" https://backend.deervision.studio/api/test/deploy)
            echo "Attempt $i - HTTP Status Code: $http_status"
            if [ $http_status -eq 200 ]; then
              echo "API returned 200 OK!"
              success=true
              break
            fi
            sleep 5
          done
          if [ "$success" = false ]; then
            echo "API did not return 200 after $max_attempts attempts. Exiting with error."
            exit 1
          fi
