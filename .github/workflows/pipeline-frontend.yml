name: Pipeline Frontend

on:
  push:
    paths-ignore:
      - 'deer-vision-backend/**'
    branches:
      - '**'

env:
  AWS_ACCOUNT_ID: '496124100072'
  AWS_REGION: 'eu-central-1'
  AWS_FRONTEND_BUCKET: 'deervision-frontend'
  APP_NAME: 'deervision'
  APP_FOLDER: 'deer-vision-frontend'

jobs:
  frontend:
    runs-on: ubuntu-latest

    permissions:
      id-token: write # This is required for requesting the JWT on AWS
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Build with Yarn
        run: |
          cd ./${{ env.APP_FOLDER }}/
          yarn install
          yarn build

      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/master'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.APP_NAME }}GitHubAction
          aws-region: ${{ env.AWS_REGION }}

      - name: Sync Files in S3
        if: github.ref == 'refs/heads/master'
        run: |
          cd ./${{ env.APP_FOLDER }}/
          files_to_remove=$(aws s3 sync "./build/" "s3://${{ env.AWS_FRONTEND_BUCKET }}/" --dryrun --delete | grep "delete:" | awk '{print $2}')
          for file in $files_to_remove; do
            echo "Remove file: $file"
            aws s3 rm $file
          done
          aws s3 cp --exclude "_source/*" --exclude "*.html" --cache-control max-age=31536000 "./build/" "s3://${{ env.AWS_FRONTEND_BUCKET }}/"
          aws s3 cp --exclude "*" --include "*.html" --cache-control no-cache --content-type "text/html" "./builds3/" "s3://${{ env.AWS_FRONTEND_BUCKET }}/" #No cache for html files entry point
      - name: Invalidate CloudFront Cache
        if: github.ref == 'refs/heads/master'
        run: |
          cloudDistributionId=$(aws cloudfront list-distributions | jq -r '.DistributionList.Items[] | select (.Aliases.Items[0]=="deervision.studio") | .Id')
          echo "Invaliding cache for distribution id: ${cloudDistributionId}"
          aws cloudfront create-invalidation --distribution-id ${cloudDistributionId} --paths "/*"
